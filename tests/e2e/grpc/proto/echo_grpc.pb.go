// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TypetestClient is the client API for Typetest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TypetestClient interface {
	Run(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type typetestClient struct {
	cc grpc.ClientConnInterface
}

func NewTypetestClient(cc grpc.ClientConnInterface) TypetestClient {
	return &typetestClient{cc}
}

func (c *typetestClient) Run(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/semaphore.typetest.Typetest/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TypetestServer is the server API for Typetest service.
// All implementations must embed UnimplementedTypetestServer
// for forward compatibility
type TypetestServer interface {
	Run(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedTypetestServer()
}

// UnimplementedTypetestServer must be embedded to have forward compatible implementations.
type UnimplementedTypetestServer struct {
}

func (*UnimplementedTypetestServer) Run(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (*UnimplementedTypetestServer) mustEmbedUnimplementedTypetestServer() {}

func RegisterTypetestServer(s *grpc.Server, srv TypetestServer) {
	s.RegisterService(&_Typetest_serviceDesc, srv)
}

func _Typetest_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TypetestServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/semaphore.typetest.Typetest/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TypetestServer).Run(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Typetest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "semaphore.typetest.Typetest",
	HandlerType: (*TypetestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Typetest_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/echo.proto",
}

// ExternalClient is the client API for External service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalClient interface {
	Post(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
}

type externalClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalClient(cc grpc.ClientConnInterface) ExternalClient {
	return &externalClient{cc}
}

func (c *externalClient) Post(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/semaphore.typetest.External/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalServer is the server API for External service.
// All implementations must embed UnimplementedExternalServer
// for forward compatibility
type ExternalServer interface {
	Post(context.Context, *Data) (*Data, error)
	mustEmbedUnimplementedExternalServer()
}

// UnimplementedExternalServer must be embedded to have forward compatible implementations.
type UnimplementedExternalServer struct {
}

func (*UnimplementedExternalServer) Post(context.Context, *Data) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (*UnimplementedExternalServer) mustEmbedUnimplementedExternalServer() {}

func RegisterExternalServer(s *grpc.Server, srv ExternalServer) {
	s.RegisterService(&_External_serviceDesc, srv)
}

func _External_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/semaphore.typetest.External/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).Post(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

var _External_serviceDesc = grpc.ServiceDesc{
	ServiceName: "semaphore.typetest.External",
	HandlerType: (*ExternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Post",
			Handler:    _External_Post_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/echo.proto",
}
